require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ContactsController do

  # This should return the minimal set of attributes required to create a valid
  # Contact. As you add validations to Contact, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "lastname" => "MyStrina" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ContactsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "get all action should response code 200" do
    it "when visit the index action ,should return the code 200" do
      get :index
      response.code.should eq("200")
    end

    it "when we vist the new action should return the code 200" do
      get :new
      response.code.should eq("200")
    end

  end

  describe "when using the factory girl to create the new test data" do
    describe "the actions should render respondent template" do
      it "index action should return the index template" do
        get :index
        response.should render_template :index
      end
      it "new action should render the new template" do
        post :new
        response.should render_template :new
      end
      it "create action should render the create template" do
        get :create
        response.should_not render_template :edit
        #response.code.should_not eq("200")
      end

      it "destroy action should get the correct code" do
      end
    end

    describe "for the show action should get the certain contact data and render the show template" do
      it " should return the correct data " do
        contact =  FactoryGirl.create(:contact)
        get :show,id:contact
        assigns(:contact).should eq(contact)
      end
       it "should render the show template" do
         get :show,id:FactoryGirl.create(:contact)
         response.should render_template :show
       end
    end

    describe "the new action test ,should validate the attibutes and return the correct data" do
      it "should render the new template " do
        get :new
        response.should render_template :new
      end

      it "should return correct code for the new creation and redirect to post action" do
        expect{
          post :create,contact:FactoryGirl.attributes_for(:contact)
        }.to change(Contact,:count).by(1)
      end

      it "should redirect the new created contact" do
        post :create,contact:FactoryGirl.attributes_for(:contact)
        response.should redirect_to Contact.last
      end
    end


    describe "create action ,include valid contact and invalid contact" do
      context "to create an contact with valid attributes" do
        it "create the new contact successfully and redirect_to the new created contact" do
          expect{
            post :create,contact:FactoryGirl.attributes_for(:contact)
          }.to change(Contact,:count).by(1)
        end

        it "should redirect to the new created contact" do
          post :create,contact:FactoryGirl.attributes_for(:contact)
        end
      end

      context "to create a contact with invalid attributes" do

        it "create a contact with invlid attributes should not success" do
          expect{
            post :create,contact:FactoryGirl.attributes_for(:invlid_contact)
          }.to_not change(Contact,:count)
        end

        it "should render the new action template correctly" do
          post :create,contact:FactoryGirl.attributes_for(:invlid_contact)
        end

      end
    end


  end

  describe "GET index" do
    #it "assigns all contacts as @contacts" do
     # contact = Contact.create! valid_attributes
     # get :index, {}, valid_session
     # assigns(:contacts).should eq([contact])
    #end
  end

  describe "GET show" do
    #it "assigns the requested contact as @contact" do
    #  contact = Contact.create! valid_attributes
    #  get :show, {:id => contact.to_param}, valid_session
    #  assigns(:contact).should eq(contact)
    #end
    it "assign the requested contact to @contact" do
      contact = FactoryGirl.create(:contact)
      get :show,id:contact
      assigns(:contact).should eq(contact)
      response.code.should eq("200")
    end

    it "should render the show tempalte" do
      contact = FactoryGirl.create(:contact)
      get :show,id:contact
      response.should render_template :show
    end
  end

  describe "GET new" do
    it "assigns a new contact as @contact" do
      get :new, {}, valid_session
      assigns(:contact).should be_a_new(Contact)
    end
  end

  #describe "GET edit" do
  #  it "assigns the requested contact as @contact" do
  #    contact = Contact.create! valid_attributes
  #    get :edit, {:id => contact.to_param}, valid_session
  #    assigns(:contact).should eq(contact)
  #  end
  #end

  describe "POST create" do
    describe "with valid params" do
      #it "creates a new Contact" do
      #  expect {
      #    post :create, {:contact => valid_attributes}, valid_session
      #  }.to change(Contact, :count).by(1)
     # end

      #it "assigns a newly created contact as @contact" do
      #  post :create, {:contact => valid_attributes}, valid_session
      #  assigns(:contact).should be_a(Contact)
      #  assigns(:contact).should be_persisted
      #end

      #it "redirects to the created contact" do
      #  post :create, {:contact => valid_attributes}, valid_session
      #  response.should redirect_to(Contact.last)
      #end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved contact as @contact" do
        # Trigger the behavior that occurs when invalid params are submitted
        Contact.any_instance.stub(:save).and_return(false)
        post :create, {:contact => { "lastname" => "invalid value" }}, valid_session
        assigns(:contact).should be_a_new(Contact)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Contact.any_instance.stub(:save).and_return(false)
        post :create, {:contact => { "lastname" => "invalid value" }}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    # set the data using factory-girl

    before :each do
      @contact = FactoryGirl.create(:contact,firstname:"Low",lastname:"jack")
    end

    describe "with valid params" do
       it "loacated the requested contact" do
         put :update,id:@contact,contact:FactoryGirl.attributes_for(:contact,firstname:"zhang",lastname:"jing")
         assigns(:contact).should eq(@contact)
       end

       it "update the the attribute" do
          put :update,id:@contact,contact:FactoryGirl.attributes_for(:contact,firstname:"zhang",lastname:"jing")
          @contact.reload
          @contact.firstname.should eq("zhang")
          @contact.lastname.should eq("jing")
       end

    describe "with invalid params and should not change the data" do
      it "loacated the requested the data" do
        put :update,id:@contact,contact:FactoryGirl.attributes_for(:invlid_contact)
        assigns(:contact).should eq(@contact)
      end

      it "should not update the data and render the edit template" do
        put :update,id:@contact,contact:FactoryGirl.attributes_for(:contact,firstname:"Larry",lastname:nil)
        @contact.reload
        @contact.firstname.should eq("Low")
        @contact.lastname.should eq("jack")
      end

      it "should render the edit template" do
        put :update,id:@contact,contact:FactoryGirl.attributes_for(:invlid_contact)
        response.should render_template :edit
      end
    end

      #it "updates the requested contact" do
       # contact = Contact.create! valid_attributes
        # Assuming there are no other contacts in the database, this
        # specifies that the Contact created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        #Contact.any_instance.should_receive(:update_attributes).with({ "lastname" => "MyString" })
       # put :update, {:id => contact.to_param, :contact => { "lastname" => "MyString" }}, valid_session
      #end

      #it "assigns the requested contact as @contact" do
       # contact = Contact.create! valid_attributes
       # put :update, {:id => contact.to_param, :contact => valid_attributes}, valid_session
       # assigns(:contact).should eq(contact)
      #end

      #it "redirects to the contact" do
      #  contact = Contact.create! valid_attributes
      #  put :update, {:id => contact.to_param, :contact => valid_attributes}, valid_session
      #  response.should redirect_to(contact)
      #end
    end

    describe "with invalid params" do
      #it "assigns the contact as @contact" do
      #  contact = Contact.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
      #  Contact.any_instance.stub(:save).and_return(false)
      #  put :update, {:id => contact.to_param, :contact => { "lastname" => "invalid value" }}, valid_session
       # assigns(:contact).should eq(contact)
      #end

     # it "re-renders the 'edit' template" do
      #  contact = Contact.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
      #  Contact.any_instance.stub(:save).and_return(false)
      #  put :update, {:id => contact.to_param, :contact => { "lastname" => "invalid value" }}, valid_session
      #  response.should render_template("edit")
      #end
    end
  end

  describe "DELETE destroy" do

    before :each do
      @contact = FactoryGirl.create(:contact)
    end

    it "delete the @contact" do
      expect{
        delete :destroy,id:@contact
      }.to change(Contact,:count).by(-1)
    end

    it "should rediret to index url after the deletion" do
      delete :destroy,id:@contact
      response.should redirect_to contacts_url
    end

    #it "destroys the requested contact" do
    #  contact = Contact.create! valid_attributes
    #  expect {
    #    delete :destroy, {:id => contact.to_param}, valid_session
    #  }.to change(Contact, :count).by(-1)
    #end

    #it "redirects to the contacts list" do
    #  contact = Contact.create! valid_attributes
    #  delete :destroy, {:id => contact.to_param}, valid_session
    #  response.should redirect_to(contacts_url)
    #end
  end


  describe "this is test for put method" do
    before :each do
      @contact = FactoryGirl.create(:contact)
    end

    context "update the contact with valid attributes" do

      it "find the requested contact @contact" do
        put :update,id:@contact,contact: FactoryGirl.attributes_for(:contact)
        assigns(:contact).should eq(@contact)
      end
      it "change the attributes of @contact" do
        put :update,id:@contact,contact:FactoryGirl.attributes_for(:contact,firstname:"zhang",lastname:"lan")
        @contact.reload
        @contact.firstname.should eq("zhang")
        @contact.lastname.should eq("lan")
      end

      it "redirect to the updated the contact" do
        put :update,id:@contact,contact:FactoryGirl.attributes_for(:contact)
        response.should redirect_to @contact
      end
    end

    context "update the contact with invalid attribute" do
    end

  end


end
